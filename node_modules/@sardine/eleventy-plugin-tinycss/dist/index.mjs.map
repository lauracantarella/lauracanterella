{"mappings":"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","sources":["packages/tinycss/lib/.eleventy.ts","packages/tinycss/lib/tiny.ts","packages/tinycss/lib/util.ts"],"sourcesContent":["import { OptionsInterface } from './options.interface';\nimport { tiny } from './tiny';\n\nexport type { OptionsInterface };\n\nmodule.exports = (eleventyConfig: any, options?: OptionsInterface) => {\n  eleventyConfig.namespace('tinyCSS', () => {\n    eleventyConfig.addTransform('tinyCSS', async (content: string, outputPath: string) => {\n      try {\n        if (outputPath && outputPath.endsWith('.html')) {\n          content = await tiny(content, options);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n      return content;\n    });\n  });\n};\n","import { parseHTML } from 'linkedom';\nimport { OptionsInterface } from './options.interface';\nimport { getExternalFiles, minify } from './util';\n\n/**\n * Optimises The CSS for each HTML page by:\n * - Inlining external CSS files\n * - Merging multiple inline styles\n * @param html The HTML content\n * @param options The plugin options\n */\nexport const tiny = async (html: string, options?: OptionsInterface): Promise<string> => {\n  const { document } = parseHTML(html);\n\n  const styles: HTMLStyleElement[] = [...document.querySelectorAll('style')];\n  const links: HTMLLinkElement[] = [...document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]')];\n\n  if (links.length > 0 || styles.length > 0) {\n    let css = '';\n\n    if (links.length > 0) {\n      const externalCSS = await Promise.all(\n        links.map((link) => {\n          if (/^(https?\\:\\/\\/|\\/\\/)/i.test(link.href)) {\n            return;\n          }\n          return getExternalFiles(link, options?.output);\n        }),\n      );\n      css = externalCSS.join('');\n      links.map((link) => {\n        if (/^(https?\\:\\/\\/|\\/\\/)/i.test(link.href)) {\n          return;\n        }\n        return link.remove();\n      });\n    }\n\n    if (styles.length > 0) {\n      for (const style of styles) {\n        css = css + style.textContent;\n        style.remove();\n      }\n    }\n    const minicss = await minify(css, html, options);\n    const inline = document.createElement('style');\n    const head = document.getElementsByTagName('head')[0];\n    const inlinStyle = document.createTextNode(minicss);\n    inline.appendChild(inlinStyle);\n    head.appendChild(inline);\n    html = document.toString();\n  }\n\n  return html;\n};\n","import { PurgeCSS } from 'purgecss';\nimport type { UserDefinedOptions as PurgeCSSOptions } from 'purgecss';\nimport browserslist from 'browserslist';\nimport { transform, browserslistToTargets } from '@parcel/css';\nimport { promises } from 'fs';\nimport { OptionsInterface } from './options.interface';\n\n/**\n * Transforms the CSS to a production ready state.\n * - PurgeCSS removes all unused CSS.\n * - Autoprefixer applies vendor specific prefixes\n * - CSSNano minifies the remaining CSS\n * @param {string} rawCss The page CSS content\n * @param {string} html The raw HTML content\n */\nexport async function minify(rawCss: string, html: string, options?: OptionsInterface): Promise<string> {\n  try {\n    const userPurgeCSSOptions = options?.purgeCSS ?? {};\n\n    const targets = browserslistToTargets(browserslist(options?.browserslists ?? null));\n\n    const { code } = transform({\n      filename: 'style.css',\n      code: Buffer.from(rawCss),\n      minify: true,\n      targets,\n    });\n\n    const purgeCSSOptions: PurgeCSSOptions = {\n      content: [\n        {\n          raw: html,\n          extension: 'html',\n        },\n      ],\n      css: [{ raw: code.toString() }],\n    };\n\n    Object.assign(purgeCSSOptions, userPurgeCSSOptions);\n\n    const [{ css }] = await new PurgeCSS().purge(purgeCSSOptions);\n\n    return css;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\n/**\n * Loads an external CSS file and returns the CSS content\n * @param link The URL for an external CSS\n */\nexport function getExternalFiles(link: HTMLLinkElement, root = '_site'): Promise<string> {\n  const src = root + link.href;\n  return promises.readFile(src, { encoding: 'utf-8' });\n}\n"],"names":[],"version":3,"file":"index.mjs.map","sourceRoot":"../../../"}